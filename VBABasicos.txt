funciones

isError(celda.value)
isEmpty(variable)
isNumeric(variable)
isDate(celda.value)

Right(texto,5)
Left(texto,5)
Len(texto)
Mid(texto,inicio,final)
InStr(posicionInicialdebusqueda, texto, "cadenaabuscar",3)
UCase(textoamauscula)
LCase(textoaminuscula)
Worksheet.Function.Proper(textoanombrepropio)
Trim(textoacortarespacios)
LTrim(textoizquierda)
RTrim(textoderecha)
StrReverse(textoavoltear)

Date
Now
Year(fecha)
Month(fecha)
Day(fecha)
TimeValue(fecha)
Hour(fecha)
Minute(fecha)
Second(fecha)
FormatDateTime(fecha, vbGeneralDate)
FormatDateTime(fecha, vbLongDate)
FormatDateTime(fecha, vbLongTime)
FormatDateTime(fecha, vbShortDate)
FormatDateTime(fecha, vbShortTime)
Format(fecha, "long date")
Format(fecha, "long time")
Format(fecha, "D")
Format(fecha, "h:m:s")
Format(fecha, "mmmm")

FormatPercent(numero,decimales)
Round(numero,decimales)
WorksheetFunction.RoundDown(nuemro,decimales)
Int(numeroaredondear)
Sgn(numeroasabersiespositivonegativoocero)
Val(stringanumero)
Cint(stringainteger)
Cdbl(stringadouble)
CDate(numeroostringafecha)

FileDataTime(rutadelarchivo"ThisWorkbook.FullName")
FileDataTime(rutadelacarpeta"ThisWorkbook.path")
Mkdir(ruta & "\" & nombrecarpeta)
Name "rutaynombredearchivoamover" As "nuevarutaynombredearchivoamover"
FileCopy "rutaynombredearchivoacopiar","rutaynombredearchivoacopiar"
Kill "rutaynombredearchivoaeliminar"

nombrearchivo = Dir("rutaynombredelarchivo") /si no existe devuelve cadena vacia
nombrecarpeta = Dir("rutacarpeta",vbDirectory) /si no existe devuelve cadena vacia

if condicion then
	sentencias
elseif
	sentencias
else
	sentencias
end if

Select Case Variable
	case 'opcion1':
		sentencias
	case 'opcion2':
		sentencias
	case 'opcion3':
		sentencias
	case 10 to 14:
		sentencias
	case 15,16,17:
		sentencias
	case is > 20:
		sentencias
	case else
		sentencias
end select

For i=1 to valor step 1
	sentencias
next i

do while condicion
	sentencias
loop 

Do
	sentencias
loop while condicion


public/private sub procedimiento(byval/byref variable1 as string, byval/byref variable2 as double)
	sentencias
end sub

sub saludo(oprional nombre as string)
	sentencias
end sub

function funcion(numero1 as double, numero2 as double) as double
	sentencias
	funcion = valor
end function

procedimiento variable1, variable2
call procedimiento(variable1,variable2)
call m칩dulo1.funcion(1,2)
procedimiento variable2 := variable2, variable1 := variable1

/terminar procedimiento
exit sub
/terminar funcion
exit function
/terminar for
exit for
/do while
exit do

//////////
//fechas y horas
/////////

dim hora as date

hora = fecha - inte(fecha)	

if hora >= 0.5 then
	jornada = "tarde"
else
	jornada = "ma침ana"
end if

////////////////
//vectores
/////////////
/un vector tiene que esta dimensionado para rellenar los datos sino saldra error
/si no sabes cuantos datos tendra el vector, hacer un do while y redimensionar el vector en cada loop

/los vectores inician en 0, pero si quieres forazar a q inicien en uno se delara option base 1 al inicioantes de los procedimientos
option base 1

dim vector(6) as string
dim vector(1 to 6) as string	
dim matriz(3,4) as long
dim matriz(1 to 3,1 to 4) as long

/devuelve limite superior del vector -> 6
ubound(vector)
/devuelve limite inferior del vector -> 1
lbound(vector) 
/devuelve limite maximo de la matriz, dimension 1 -> 3
ubound(matriz,1) 
/devuelve limite minimo de la matriz, dimension 1 -> 1
lbound(matriz,1) 
/devuelve limite maximo de la matriz, dimension 2 -> 4
ubound(matriz,1) 
/devuelve limite maximo de la matriz, dimension 2 -> 1
lbound(matriz,1) 

dim vectorpalabras() as string
vectorpalabras = Split(frase," ")
frase = join(vectorpalabras," ")

filtrado = filter(vectorfuente,cadenaabuscar,true(coincidencias)false(excluidos),binariosensibleamayusculas/textononosensible/databaseaccess)

/redimensionar un vector
ReDim vector(1 to 10)
/redimensionar un vector preservando los datos
ReDim Preserve vector(1 to 15)

/borrar vector, dimension y datos
Erase vector

////////////
/Parametros indefinidos
//////////

sub procedimiento(variable as string, ParamArray vector() as variant)

end sub

//////////
//funciones como vector
////////

function funcion(variable as double) as double()

	funcion = vector

end function

//////////
//funciones con parametro vector
////////
function funcion(byref variable() as double) as double

	funcion = valor

end function


//////////////
/type(objetos)
////////////

/definir antes de los procedimientos
public/private type objeto
	propiedad1 as string
	propiedad2 as integer
end type

objeto.propiedad1

///////////
/enum
//////////

/definir antes de los procedimientos
public/private enum color
	rojo = 1
	azul = 2
	verde = 3
end enum

color.rojo

/enumerador oculto
/cuando se utiliza no aparece en la lista inteligente
/se suele utilizar first y last en listas consecutivas para saber el numero inicio y final y validar si un elemento esta dentro de la lista

public/private enum color
	[_First] = 1
	rojo = 1
	azul = 2
	[_magenta] = 3
	verde = 4
	[_Last] = 4
end enum

for i = color.[_First] to color.[_Last]

next i


/////////
/Objetos
/////////

////////
/Application

/refrescar todos las formulas
Application.Calculate
Worksheets(1).Calculate
Range("A1").Calculate

/Actualizacion automatica de las celdas
Application.Calculation = xlAutomatic

/cerrar el archivo
Application.Quit

/agregar el mismo valor a distintos conjuntos de celdas
Application.Union(Range("J1:J2"),Range("M1:M5")).Value = "Prueba Union"

/Cambiar el titulo de la venta de excel
Application.Caption = "Nuevo nombre ventana excel"

/borrar una hoja de calculo, va a requerir confirmacion
Sheets("hoja2").Delete
/forzar el cierre, deshabilitando display alerts y volviendolo a habilitar
Applications.DisplayAlerts = false
Sheets("hoja2").Delete
Applications.DisplayAlerts = true

/deshabilitar el parpado de excel al cambiar de estados
Application.ScreenUpdating = false
Application.ScreenUpdating = true

/ocultar la aplicacion, esperar 2 sengundos, volver a mostrar la aplicacion
Application.Visible = false
Application.Wait(now+timevalue("00:00:02"))
Application.Visible = true
 

////////
/Workbook

/nombre de libro activo
ActiveWorkbook.Name

/nombre del libro donde esta la macro
ThisWorkbook.Name
/ruta
ThisWorkbook.Path
/nombre y ruta
ThisWorkbook.FullName
/autor
ThisWorkbook.Author
/verificar si se guardo, true or false
ThisWorkbook.Saved
/hoja activa
ThisWorkbook.VBProject.Name = "Proyecto Propiedades"
/nombre hoja actva
ThisWorkbook.ActiveSheet.Name
/Password al abrir el archivo
ThisWorkbook.Password = 1234
/si tiene contrase침a, true or false
ThisWorkbook.HasPassword
/Si esta protegido, true or false
ThisWorkbook.ProtectStructure
/Contrase침a para escritura
ThisWorkbook.WritePassword  = 1234
/si tiene habilitado el backup
ThisWorkbook.CreateBackup
/habilitar el backup
ThisWorkbook.CreateBackup = true
/Activar
ThisWorkbook.Activate
/Cerrar libro, cerrar libro sin preguntar si guardar
Workbooks("Libro1").Close
Workbooks("Libro1").Close False
/Guardar
ThisWorkbook.Save
/GuardarComo
ThisWorkbook.SaveAs  "C:\Usuarios\Eduardo\otros\nombrearchivo.xls"
/Abrir
Workbooks.Open RutaArchivo&NombreArchivo



/activar el primer libro
Workbooks("1").activate

/codigo q solo vale en thisworkbook. Nombre del libro utilizando ME
ME.Name


T
