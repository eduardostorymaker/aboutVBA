funciones

isError(celda.value)
isEmpty(variable)
isNumeric(variable)
isDate(celda.value)

Right(texto,5)
Left(texto,5)
Len(texto)
Mid(texto,inicio,final)
InStr(posicionInicialdebusqueda, texto, "cadenaabuscar",3)
UCase(textoamauscula)
LCase(textoaminuscula)
Worksheet.Function.Proper(textoanombrepropio)
Trim(textoacortarespacios)
LTrim(textoizquierda)
RTrim(textoderecha)
StrReverse(textoavoltear)

Date
Now
Year(fecha)
Month(fecha)
Day(fecha)
TimeValue(fecha)
Hour(fecha)
Minute(fecha)
Second(fecha)
FormatDateTime(fecha, vbGeneralDate)
FormatDateTime(fecha, vbLongDate)
FormatDateTime(fecha, vbLongTime)
FormatDateTime(fecha, vbShortDate)
FormatDateTime(fecha, vbShortTime)
Format(fecha, "long date")
Format(fecha, "long time")
Format(fecha, "D")
Format(fecha, "h:m:s")
Format(fecha, "mmmm")

FormatPercent(numero,decimales)
Round(numero,decimales)
WorksheetFunction.RoundDown(nuemro,decimales)
Int(numeroaredondear)
Sgn(numeroasabersiespositivonegativoocero)
Val(stringanumero)
Cint(stringainteger)
Cdbl(stringadouble)
CDate(numeroostringafecha)

FileDataTime(rutadelarchivo"ThisWorkbook.FullName")
FileDataTime(rutadelacarpeta"ThisWorkbook.path")
Mkdir(ruta & "\" & nombrecarpeta)
Name "rutaynombredearchivoamover" As "nuevarutaynombredearchivoamover"
FileCopy "rutaynombredearchivoacopiar","rutaynombredearchivoacopiar"
Kill "rutaynombredearchivoaeliminar"

nombrearchivo = Dir("rutaynombredelarchivo") /si no existe devuelve cadena vacia
nombrecarpeta = Dir("rutacarpeta",vbDirectory) /si no existe devuelve cadena vacia

if condicion then
	sentencias
elseif
	sentencias
else
	sentencias
end if

Select Case Variable
	case 'opcion1':
		sentencias
	case 'opcion2':
		sentencias
	case 'opcion3':
		sentencias
	case 10 to 14:
		sentencias
	case 15,16,17:
		sentencias
	case is > 20:
		sentencias
	case else
		sentencias
end select

For i=1 to valor step 1
	sentencias
next i

do while condicion
	sentencias
loop 

Do
	sentencias
loop while condicion


public/private sub procedimiento(byval/byref variable1 as string, byval/byref variable2 as double)
	sentencias
end sub

sub saludo(oprional nombre as string)
	sentencias
end sub

function funcion(numero1 as double, numero2 as double) as double
	sentencias
	funcion = valor
end function

procedimiento variable1, variable2
call procedimiento(variable1,variable2)
call módulo1.funcion(1,2)
procedimiento variable2 := variable2, variable1 := variable1

/terminar procedimiento
exit sub
/terminar funcion
exit function
/terminar for
exit for
/do while
exit do

//////////
//fechas y horas
/////////

dim hora as date

hora = fecha - inte(fecha)	

if hora >= 0.5 then
	jornada = "tarde"
else
	jornada = "mañana"
end if

////////////////
//vectores
/////////////
/un vector tiene que esta dimensionado para rellenar los datos sino saldra error
/si no sabes cuantos datos tendra el vector, hacer un do while y redimensionar el vector en cada loop

/los vectores inician en 0, pero si quieres forazar a q inicien en uno se delara option base 1 al inicioantes de los procedimientos
option base 1

dim vector(6) as string
dim vector(1 to 6) as string	
dim matriz(3,4) as long
dim matriz(1 to 3,1 to 4) as long

/devuelve limite superior del vector -> 6
ubound(vector)
/devuelve limite inferior del vector -> 1
lbound(vector) 
/devuelve limite maximo de la matriz, dimension 1 -> 3
ubound(matriz,1) 
/devuelve limite minimo de la matriz, dimension 1 -> 1
lbound(matriz,1) 
/devuelve limite maximo de la matriz, dimension 2 -> 4
ubound(matriz,1) 
/devuelve limite maximo de la matriz, dimension 2 -> 1
lbound(matriz,1) 

dim vectorpalabras() as string
vectorpalabras = Split(frase," ")
frase = join(vectorpalabras," ")

filtrado = filter(vectorfuente,cadenaabuscar,true(coincidencias)false(excluidos),binariosensibleamayusculas/textononosensible/databaseaccess)

/redimensionar un vector
ReDim vector(1 to 10)
/redimensionar un vector preservando los datos
ReDim Preserve vector(1 to 15)

/borrar vector, dimension y datos
Erase vector

////////////
/Parametros indefinidos
//////////

sub procedimiento(variable as string, ParamArray vector() as variant)

end sub

//////////
//funciones como vector
////////

function funcion(variable as double) as double()

	funcion = vector

end function

//////////
//funciones con parametro vector
////////
function funcion(byref variable() as double) as double

	funcion = valor

end function


//////////////
/type(objetos)
////////////

/definir antes de los procedimientos
public/private type objeto
	propiedad1 as string
	propiedad2 as integer
end type

objeto.propiedad1

///////////
/enum
//////////

/definir antes de los procedimientos
public/private enum color
	rojo = 1
	azul = 2
	verde = 3
end enum

color.rojo

/enumerador oculto
/cuando se utiliza no aparece en la lista inteligente
/se suele utilizar first y last en listas consecutivas para saber el numero inicio y final y validar si un elemento esta dentro de la lista

public/private enum color
	[_First] = 1
	rojo = 1
	azul = 2
	[_magenta] = 3
	verde = 4
	[_Last] = 4
end enum

for i = color.[_First] to color.[_Last]

next i


/////////
/Objetos
/////////

////////
/Application

/refrescar todos las formulas
Application.Calculate
Worksheets(1).Calculate
Range("A1").Calculate

/Actualizacion automatica de las celdas
Application.Calculation = xlAutomatic

/cerrar el archivo
Application.Quit

/agregar el mismo valor a distintos conjuntos de celdas
Application.Union(Range("J1:J2"),Range("M1:M5")).Value = "Prueba Union"

/Cambiar el titulo de la venta de excel
Application.Caption = "Nuevo nombre ventana excel"

/borrar una hoja de calculo, va a requerir confirmacion
Sheets("hoja2").Delete
/forzar el cierre, deshabilitando display alerts y volviendolo a habilitar
Applications.DisplayAlerts = false
Sheets("hoja2").Delete
Applications.DisplayAlerts = true

/deshabilitar el parpado de excel al cambiar de estados
Application.ScreenUpdating = false
Application.ScreenUpdating = true

/ocultar la aplicacion, esperar 2 sengundos, volver a mostrar la aplicacion
Application.Visible = false
Application.Wait(now+timevalue("00:00:02"))
Application.Visible = true
 

////////
/Workbook

/nombre de libro activo
ActiveWorkbook.Name

/nombre del libro donde esta la macro
ThisWorkbook.Name
/ruta
ThisWorkbook.Path
/nombre y ruta
ThisWorkbook.FullName
/autor
ThisWorkbook.Author
/verificar si se guardo, true or false
ThisWorkbook.Saved
/hoja activa
ThisWorkbook.VBProject.Name = "Proyecto Propiedades"
/nombre hoja actva
ThisWorkbook.ActiveSheet.Name
/Password al abrir el archivo
ThisWorkbook.Password = 1234
/si tiene contraseña, true or false
ThisWorkbook.HasPassword
/Si esta protegido, true or false
ThisWorkbook.ProtectStructure
/Contraseña para escritura
ThisWorkbook.WritePassword  = 1234
/si tiene habilitado el backup
ThisWorkbook.CreateBackup
/habilitar el backup
ThisWorkbook.CreateBackup = true
/Activar
ThisWorkbook.Activate
/Cerrar libro, cerrar libro sin preguntar si guardar
Workbooks("Libro1").Close
Workbooks("Libro1").Close False
/Guardar
ThisWorkbook.Save
/GuardarComo
ThisWorkbook.SaveAs  "C:\Usuarios\Eduardo\otros\nombrearchivo.xls"
/Abrir
Workbooks.Open RutaArchivo&NombreArchivo



/activar el primer libro
Workbooks("1").activate

/codigo q solo vale en thisworkbook. Nombre del libro utilizando ME
ME.Name


///////Eventos workbook

///se selecciona en la ventana de programacion y el codigo se ejecuta cuando ocurra el evento

/cuando se abre la hoja
open
/cuando se abre una nueva hoja
newsheet
/antesde cerrar
BeforeClose
/antes de guardar
Befor save

**indica la ultima fila que tiene datos
Range(rango).End(x1Up).row
**

/agregar un consolidado de hojas nuevas

private sub Workbook_NewSheet (byval hoja as Object)

	numerofila = Sheets("HojaConsolidar").Range("a65536").End(xlup).row+1
	sheets("HojaConsolidar").range("A"&numerofila).Value = sh.name
	sheets("HojaConsolidar").range("B"&numerofila).Value = now

end sub


////////
/Worksheets o sheets

/se puede utilizar worksheets o sheets

/el indice se determina por la posicion de la pestaña, 1, 2, 3..
sheets(indice)
/encontrar el indice de una oja
sheets("nombre").index
/ocultar hora (-1 / 0 / 2 )(xlSheetVisible/xlSheetHidden/xlSheetVeryHidden)(true/false)
sheets("nombre").visible = true
/seleccionar varia hojas
sheets(Array("hoja1","hoja2","hoja3")).select
/activar una hoja, solo se puede seleccionar una a la vez
sheets("hoja2").activate
/agregar una hoja, cuando la agregas se activa
sheet.add.name = "mi hoja"
/eliminar hojas
Applications.DisplayAlerts = false
sheets(1).delete
Applications.DisplayAlerts = true
/mover hoja
sheets("hoja4").Move after:= sheets("hoja1")
sheets("hoja4").Move before:= sheets("hoja1")
/copiar hoja
sheets("hoja10").copy after:= sheets("hoja1")
/proteger
sheets(1).Protect Password := "1234", content:= true
/desproteger
sheets(1).Unprotect Password := "1234"
/cantidad de hojas
worksheets.count

//////////////eventos sheets

/se deve de seleccionar la hoja, worksheet y luego el evento

/cuando se hace funciones o formulas
Calulate
/antes del click dercho
beforeRightClick
/cambiar la seleccion
SelectionChange
/al cambiar
change
/antes del doble click
beforedobleclick

**informacion de las celdas seleccionadas
target.address
***

with ActivateWindow
	.scrollColumn = target.column
	.scrollRow = targer.row
end with

/Desactivar el click derecho
private sub worksheet_beforerightclick (byval target as range, cancel as boolean)
	
	cancel = true
	msgbox "El click derecho esta desactivado"
end sub

/bloquear conjunto de celdas al dar doble click

private sub worksheet_beforedoubleclick (byval target as range, cancel as boolean)

	if not application.instersect (target, range("a1:c30")) is nothing then
		cancel = true
		msgbox "evento prohibido"
	end if

end sub

/registrar los cambios sucedidos en una celda en la hoja Cambios

private sub worrksheet_change(byval target as range)
	if not application.intersect (target, range("a1:c30")) is nothing then
		fila = sheets("Cambios").[a1000000].End(xlup).row+1
		sheets("Cambios").Range("a"&fila).value = Target.address
		sheets("Cambios").Range("b"&fila).value = Target.value
		sheets("Cambios").Range("c"&fila).value = now
		sheets("Cambios").Range("d"&fila).value = Application.username
	end if
end 

////////
/Range
///////
/moverse una fila abajo
range(rango).offset(1,0)
/utilizando formulas, se tiene q escribir la formula en igles
range(rango).offset(1,0).formula = "=sum(B2:B10)"
/utilizando formulas en tu idioma
range(rango).offset(1,0).FormulaLocal = "=suma(B2:B10)"
/mostrando filas y columnas
Activecell.row
Activecell.column
/seleccionado un rango
range(rango).select
/activando una celda
range(celda).activate
/calculo automatico de formulas
range(celda).calculate
/cortar y pegar
/1ra forma
range(celda).cut Range(otracelda)
/2da forma
range(celda).cut
range(otracelda).select
avtivesheet.paste
/copiado y pegado especial
range(celdas).copy
range(otracelda).pastespecial xlpastevalues
/borrar celdas, las de la derecha toman su lugar
range(celdas).delete
/se especifica que se moveran las de la derecha
range(celdas).delete xlshifttoleft
/se especifica que se moveran las de abajo
range(celdas).delete xlshifttoup
/limpiar (borrar) celdas sin mover las otras, borra valores contenidos formatos
range(celdas).clear
/limpiar solo valores
range(celdas).clearcontents
/añadir comentario
range(celdas).addcomet = "comentario"
/seleccionar filas, selecciona filas del 1 al 10 con todas las columnas
rows("1:10").select
/seleccionar columnas, del A al E y todas las filas
columns("A:E").select
/cantidad de filas
range(rango).rows.count
/cantidad de columnas
range(rango).columns.count

//////identificar ultima fila
/1er
msgbox Activesheet.usedrange.specialcells(xlCellTypeLastCell).row
/2do, si tiene celdas vacias no las cuenta
msgbox worksheetfunction.countA(Activesheet.columns(1))
/3ro, buscar el dato desde lo mas bajo
msgbox range("A65536").End(xlUp).row
msgbox [A65536].End(xlUp).row

////////
/foreach
///////

for each item in arreglo
	msgbox item
next item